[["index.html", "A Handbook on R Chapter 1 Introduction 1.1 Initial Setup 1.2 A Dose of Theory", " A Handbook on R Freddy Ray Drennan 2021-11-21 Chapter 1 Introduction 1.1 Initial Setup Book Outline [Read] What is R Install R Install R Studio Windows Only: Install RTools When installed, run in the RStudio Console: write('PATH=\"${RTOOLS40_HOME}\\\\usr\\\\bin;${PATH}\"', file = \"~/.Renviron\", append = TRUE) Windows Only: Install WSL2 Computer should be completely updated before install. Install Git Create Github Account Fork r-handbook Install Docker and Docker Compose Create AWS Account Billing will be discussed in the course, but dont expect to pay much - i.e., 10-20 dollars a month for high course activity. Remember to stop EC2 servers when we begin using them. AWS is polite about your first few refund requests. Create Reddit Account Follow Instructions here Make sure you install the tidyverse packages. Update to renv later. 1.2 A Dose of Theory I struggle to determine the best way to start a book like this. But, as someone who has read one or two programming books, I cant help but get tired of the Hello World introduction. If you dont know what I am talking about, dont worry, you will but I wont bother you with that here. Instead, I want to talk about boring lists. In order to talk about lists, we need to go get one. In the code below, you will see the function, library. Functions do things for us given a set of inputs. R is called a functional language, so it is fitting that the first thing we do is use one. In this case, library loads a package of code that someone submitted for the rest of the R community to use. We will discuss how to create these packages at a later part in the book. library(COVID19) ## Warning: package &#39;COVID19&#39; was built under R version 4.1.2 covid_data &lt;- covid19(country = &#39;United States&#39;, start = &#39;2021-01-01&#39;) ## We have invested a lot of time and effort in creating COVID-19 Data Hub, please cite the following when using it: ## ## Guidotti, E., Ardia, D., (2020), &quot;COVID-19 Data Hub&quot;, Journal of Open ## Source Software 5(51):2376, doi: 10.21105/joss.02376. ## ## A BibTeX entry for LaTeX users is ## ## @Article{, ## title = {COVID-19 Data Hub}, ## year = {2020}, ## doi = {10.21105/joss.02376}, ## author = {Emanuele Guidotti and David Ardia}, ## journal = {Journal of Open Source Software}, ## volume = {5}, ## number = {51}, ## pages = {2376}, ## } ## ## To hide this message use &#39;verbose = FALSE&#39;. How do I know if a function is vectorized install.packages(&#39;tidyverse&#39;) "],["what-is-r.html", "Chapter 2 What is R 2.1 Types of Problems You Can Solve 2.2 Base R, Tidyverse, data.table 2.3 Arguments/ Developments within the language 2.4 What are Variables", " Chapter 2 What is R 2.1 Types of Problems You Can Solve 2.2 Base R, Tidyverse, data.table 2.3 Arguments/ Developments within the language 2.4 What are Variables 2.4.1 Valid Variable Names "],["functions.html", "Chapter 3 Building Blocks 3.1 Vectors 3.2 Functions", " Chapter 3 Building Blocks 3.1 Vectors Vectors are containers information of similar type. You can think of them as having \\(1*n\\) cells where \\(n\\) is any positive integer, and make up the rows and columns of tables. Vectors always contain the same type of value. R has many different types of vectors, but the most common are numeric, character, and logical (TRUE/FALSE). Vectors are cool. I like to think of them as boxes that can only be stacked on top of one another. typeof(c(TRUE)) ## [1] &quot;logical&quot; typeof(c(TRUE, 1)) ## [1] &quot;double&quot; typeof(c(TRUE, 1, &#39;a&#39;)) ## [1] &quot;character&quot; 3.2 Functions Functions are containers where anything or nothing can happen, but whatever happens, it happens the same way every single time. They allow for generalization of complicated ideas and routines that we wish to repeat over and over again. A function may have an input, but no output. It may have an output, but no input, both or none. If its something you need to do repeatedly, or containing code makes your program easier to read, then write a function for that process. Rule 4: Functions have inputs, outputs, and a body. A function can have multiple outputs, but given a particular set of inputs, the solution should never change assuming you are not developing a function with randomness built in. R has a built-in constant called letters. This means that no matter where you are writing R, letters will be available to you. We see that letters is a character vector in our program below, and use the composition of functions to create a program that describes letters. print(letters) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; Next, we can use some functions which take in pretty much any object that exists in R and spits back information regarding the letters data. main &lt;- function() { print_information &lt;- function(x) { variable_name = deparse1(substitute(x)) length_x = length(x) typeof_x &lt;- typeof(x) is_vec_x &lt;- is.vector(x) meta_list &lt;- list( length = length_x, type = typeof_x, is_vector = is_vec_x ) cli::cli_alert(&#39;Information about {variable_name}&#39;) cli::cli_alert_info(&quot;{variable_name} is a 1x{length_x} dimensional&quot;) cli::cli_alert_info(&quot;&quot;) purrr::iwalk(meta_list, function(x, index) { cli::cli_alert_info(glue::glue(&#39;{index} {x} is type {typeof(x)}&#39;)) }) return(meta_list) } cli::cli_alert_info(&#39;Execute print_information&#39;) output &lt;- print_information(mtcars) cli::cli_alert_success(&#39;Execute print_information complete&#39;) print(output) } main() ## i Execute print_information ## &gt; Information about mtcars ## i mtcars is a 1x11 dimensional ## i ## i length 11 is type integer ## i type list is type character ## i is_vector FALSE is type logical ## v Execute print_information complete ## $length ## [1] 11 ## ## $type ## [1] &quot;list&quot; ## ## $is_vector ## [1] FALSE "],["debugging.html", "Chapter 4 Debugging 4.1 What is the debugger? 4.2 How to learn R without knowing any R 4.3 browser() 4.4 next, continue 4.5 debug and undebug 4.6 debugonce 4.7 Understanding debugging output 4.8 LOTS OF DEBUGGING EXERCISES CANNOT STRESS ENOUGH", " Chapter 4 Debugging 4.1 What is the debugger? 4.2 How to learn R without knowing any R 4.3 browser() 4.4 next, continue 4.5 debug and undebug 4.6 debugonce 4.7 Understanding debugging output 4.8 LOTS OF DEBUGGING EXERCISES CANNOT STRESS ENOUGH "],["vectors-1.html", "Chapter 5 Vectors 5.1 c 5.2 [ and [[", " Chapter 5 Vectors 5.1 c 5.2 [ and [[ Vectors atomic Strings Base R stringr Regular Expressions Cheat Sheet Numbers Integer Double Factors as.factor vs.Â as_factor Dates Base R lubridate "],["lists.html", "Chapter 6 Lists 6.1 list 6.2 [ and [[", " Chapter 6 Lists 6.1 list 6.2 [ and [[ Lists list() and c [ and [[ Connection between lists and json jsonlite "],["tables.html", "Chapter 7 Tables 7.1 c 7.2 [ and [[", " Chapter 7 Tables 7.1 c 7.2 [ and [[ Tables matrices data.frame vs tibble data.frames are lists with equal length, atomic vectors "],["functional-programming.html", "Chapter 8 Functional Programming 8.1 Base R 8.2 Modern R", " Chapter 8 Functional Programming Functions Sequences Mapping functions pipes void return Can a function return nothing? What are side effects? Multiple return statements 8.1 Base R apply, lapply, mapply 8.2 Modern R purrr * map_* * map2_* * pmap_* * Iterate over What? * Why are data.frames mapped over columnwise? * A: data.frames are lists, and mapping functions will iterate over each individual item in a list "],["tidy-data.html", "Chapter 9 Tidy Data", " Chapter 9 Tidy Data Concept of tidy data Tidy Data Paper tidyr pivot_longer pivot_wider "],["dplyr.html", "Chapter 10 dplyr", " Chapter 10 dplyr dplyr and data manipulation main functions select mutate filter transmute summarizing data group_by summarize - one row per group mutate - one or many rows per group will have same value ungroup - remove grouping Not everything has to be a group_by Solving group problems with vectors Joining Tables inner_join full_join left_join / right_join "],["project-outline.html", "Chapter 11 Project Outline", " Chapter 11 Project Outline To be expanded over many chapters Windows vs Mac vs Linux Docker Installation Windows needs to set up VM in bios RStudio IDE Cheat Sheet reddit api creds reticulate Enough R to know Python Type Conversions miniconda installation virtual environments Package Structure Defaults for RStudio Rebuild and Restart with Roxygen2 .env .gitignore .Rprofile .Renviron Packages necessary for efficient development usethis roxygen devtools Cheat Sheet Make and Makefiles Automating Package Build Unit Testing (probably bad location for ut, no code written) testthat Git Github git circle, workflow Retrieving Data from API praw dotenv and .env Old Reddit Code to start with Docker and Docker Compose Introduction .dockerignore Create Postgres Database What are Ports? Postgres Credentials Create functions for Storing Reddit Data Need preferred method for streaming data, i.e., Airflow not a good scheduler for scripts that are always running and need a kickstart on failure, timeout, etc. Docker with restart: always may be sufficient Plumber API Add to docker-compose Functions for ETL, Shiny Application ETL with Airflow and HTTP operator connected to Plumber API Shiny Reactive Graph Order does not matter, the graph does Why Modules? map over modules Automating Infrastructure awscli boto3 biggr Create EC2 Server from R User Data "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
