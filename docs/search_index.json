[["index.html", "A Handbook on R Chapter 1 A Tour of R 1.1 Its all about functions 1.2 Function Names 1.3 Solve a Problem in R", " A Handbook on R Freddy Ray Drennan 2021-11-26 Chapter 1 A Tour of R 1.1 Its all about functions I think understanding what we are able to do with functions will help you understand how to solve the problems you are going to face. What we really care about is the ability to port around complex tools that make our tasks simpler. Functions are often described as boxes. These boxes take inputs and create outputs and can do things such as Access/build APIs and databases, store data locally or remote. Build models and make predictions based on the data we collect. Edit and manipulate our data into new, more useful forms Display our data on the internet in the form on web based applications. 1.2 Function Names Functions can be named or unnamed. Unnamed functions are called anonymous functions. Anonymous functions are generally used when you have a simple but unique task that is applied to multiple objects sequentially, but which also is unlikely to be repeated anywhere else. For example, below we create a function which takes a value x and returns x+2. sapply is a special kind of function called a mapping function. It takes something (the first argument) an X and applies a function FUN to each element of X. In this case, the numbers 1 to 10. add_two &lt;- function(x) x + 2 sapply(X = 1:10, FUN = add_two) ## [1] 3 4 5 6 7 8 9 10 11 12 sapply(X = 1:10, FUN = function(x) x + 2) ## [1] 3 4 5 6 7 8 9 10 11 12 The input is whatever is contained within the parenthesis () and the output will be displayed below the code. We will talk more about functions later, so dont try to get too caught up in the details here. Programming is something I want you to soak in, not memorize. 1.2.1 Function Theory The following unnamed function, a special case called an anonymous function or lambda function, \\((x, y)\\rightarrow x(x + y)\\) has two critical components. Dont be afraid of the right arrow. We just say that \\(x\\) and \\(y\\) map onto whatever expression is on the right hand side. The function has any number of inputs, in the case above there are two: \\((x,y)\\) The function has a body which defines the output, \\(x(x + y)\\) We can express evaluation of the function by following the function with inputs: \\(((x, y)\\rightarrow x(x + y))(1, 2)\\) which evaluates to \\((1, 2) \\rightarrow 1 * (1 + 2) = 3\\) When we write functions in R we will use both named and unnamed functions. But lets start with the first example. This function is an anonymous function. We havent given it a name yet. But we can call it all the same. function(x, y) x * (x + y) ## function(x, y) x * (x + y) # Wrapping function in () means evaluate now (function(x, y) x * (x + y))(1, 2) ## [1] 3 Now wouldnt it be nice if we could take this function with us? Lets give it a name and update our notation \\(xy\\_calc(x, y)\\ \\rightarrow x(x + y)\\) library(cli) xy_calc &lt;- function(x, y) { x_name &lt;- deparse1(substitute(x)) y_name &lt;- deparse1(substitute(y)) cli_alert_info(&#39;{x_name} is {x} and {y_name} is {y}&#39;) result &lt;- x * (x + y) cli_alert_success(&#39;result is {result}&#39;) result } new_calc &lt;- function(a, b) xy_calc(xy_calc(a, a), xy_calc(b, b)) Now we can describe silly things like this \\(newcalc(x, y) \\rightarrow xy\\_calc(xy\\_calc(x, x), xy\\_calc(y,y)))\\) new_calc(1, 2) ## i a is 1 and a is 1 ## v result is 2 ## i b is 2 and b is 2 ## v result is 8 ## i xy_calc(a, a) is 2 and xy_calc(b, b) is 8 ## v result is 20 ## [1] 20 1.2.2 Vectors and Lists The c function creates something called a vector, which is a \\(1\\) dimensional matrix or table. Vectors are the singular columns or rows in a table. They do not mix types. The types you will work with are primarily logical, integer, double, character, list, NULL, closure (function). There are two functions that we should get familiar with first, but lets go with the one I think you will use more of the two, though both list and c will be functions you use daily. c(integer = 1L, double = 1, bool = TRUE, character = &#39;a&#39;) ## integer double bool character ## &quot;1&quot; &quot;1&quot; &quot;TRUE&quot; &quot;a&quot; list(integer = 1L, double = 1, bool = TRUE, character = &#39;a&#39;) ## $integer ## [1] 1 ## ## $double ## [1] 1 ## ## $bool ## [1] TRUE ## ## $character ## [1] &quot;a&quot; 1.2.3 data.frame and tibble The table below has 336,776 rows. Get used to looking at data in a different way. Were not in Excel anymore and sometimes it makes people feel funny about not being able to see their data. When I say see, I simply mean is that look at the data below. This is a two dimensional table called a dataframe or tibble. A dataframe is a special form of a list, that requires each element be atomic (of one type) and of equal length. We can see this is true by looking at the output below. ## Rows: 336,776 ## Columns: 19 ## $ year &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2~ ## $ month &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~ ## $ day &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~ ## $ dep_time &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, ~ ## $ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, ~ ## $ dep_delay &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1~ ## $ arr_time &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,~ ## $ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,~ ## $ arr_delay &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1~ ## $ carrier &lt;chr&gt; &quot;UA&quot;, &quot;UA&quot;, &quot;AA&quot;, &quot;B6&quot;, &quot;DL&quot;, &quot;UA&quot;, &quot;B6&quot;, &quot;EV&quot;, &quot;B6&quot;, &quot;~ ## $ flight &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4~ ## $ tailnum &lt;chr&gt; &quot;N14228&quot;, &quot;N24211&quot;, &quot;N619AA&quot;, &quot;N804JB&quot;, &quot;N668DN&quot;, &quot;N394~ ## $ origin &lt;chr&gt; &quot;EWR&quot;, &quot;LGA&quot;, &quot;JFK&quot;, &quot;JFK&quot;, &quot;LGA&quot;, &quot;EWR&quot;, &quot;EWR&quot;, &quot;LGA&quot;,~ ## $ dest &lt;chr&gt; &quot;IAH&quot;, &quot;IAH&quot;, &quot;MIA&quot;, &quot;BQN&quot;, &quot;ATL&quot;, &quot;ORD&quot;, &quot;FLL&quot;, &quot;IAD&quot;,~ ## $ air_time &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1~ ## $ distance &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, ~ ## $ hour &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6~ ## $ minute &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0~ ## $ time_hour &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0~ There are \\(19*336,776\\) cells within this table because there are \\(19\\) vectors (columns) of length \\(336,776\\). Each element in the vector is one instance of a string, a number, a date, etc. And each type has functions that can operate on it, in a repeatable way. This is why each column (vector) is of one type, either int, dbl, chr, or dttm. There are other types in R, but we will be sticking to these for now. int is a special form of number called an integer - 1, 2, -1231, etc. dbl stands for double, a number which can contain decimal values i.e, 1.3. Not everything needs to be double, because an integer takes less memory in your computer to store. Dont get too caught up on whether or not something should be an integer or double and generally speaking you wont consciously make a choice. If we were to write by hand the expression we created, it would be library(cli) # Same as f(x) = 2x + 3 f &lt;- function(x) { x &lt;- x * x x } g &lt;- function(x=NULL, y=NULL) { result &lt;- x + min(x, y) result } print(f(g(3, 4))) ## [1] 36 We now have a way of describing inputs and output a little more clearly. Instead of writing, \\((3 + min(3, 4)) * (3 + min(3, 4))\\) we can write \\(f(g(3, 4))\\) or try new creations like \\(z(x, y)=f(g(f(x), f(y)))\\) so \\(z(1, 2)=f(g(f(1), f(2)))=f(g(1, 4))=f(2)=4\\). Now just take this idea about functions and expand your definition of inputs and outputs to be any number, none or many, and of any type that R supports - character, numeric, date/time, data.frame or list - all of which well cover. 1.3 Solve a Problem in R Lets solve a problem using R. Suppose we have a friend that is interested in the current trend regarding COVID-19 cases. The first thing we will probably do is try to figure out an efficient and reliable way for importing Covid-19 data into our R session. Conveniently, the COVID19 package allows us to pull the latest data without any hard work and consists of one function - covid19. 1.3.1 Installing Packages In your RStudio console, you can write the following to install the COVID19 package using the install.packages function. If you are interested in learning more about this function, you can write ?install.packages in your console and the documentation for the function will appear. # For help menu, uncomment next line # ?install.packages # If the package is not yet installed, you can install it by passing # a string with the package name to the `install.packages` function install.packages(pkgs = c(&#39;COVID19&#39;)) 1.3.2 Available Packages on CRAN For a full list of what packages are available through the install.packages function, please check out the Contributed Packages page at CRAN or scrape it yourself. library(rvest) cran_packages &lt;- &#39;https://cran.r-project.org/web/packages/available_packages_by_date.html&#39; package_data &lt;- html_table(html_element(read_html(cran_packages), &#39;table&#39;)) print(package_data) ## # A tibble: 18,500 x 3 ## Date Package Title ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2021-11-25 aMNLFA Automated Moderated Nonlinear Factor Analysis Usi~ ## 2 2021-11-25 audio Audio Interface for R ## 3 2021-11-25 boot.pval Bootstrap p-Values ## 4 2021-11-25 bootUR Bootstrap Unit Root Tests ## 5 2021-11-25 CALIBERrfimpute Multiple Imputation Using MICE and Random Forest ## 6 2021-11-25 filearray File-Backed Array for Out-of-Memory Computation ## 7 2021-11-25 gamlss.foreach Parallel Computations for Distributional Regressi~ ## 8 2021-11-25 ggquiver Quiver Plots for &#39;ggplot2&#39; ## 9 2021-11-25 ICSKAT Interval-Censored Sequence Kernel Association Test ## 10 2021-11-25 mapscanner Print Maps, Draw on Them, Scan Them Back in ## # ... with 18,490 more rows n_packages &lt;- length(unique(package_data$Package)) cli_alert_info(&#39;There are {n_packages} packages on CRAN&#39;) ## i There are 18500 packages on CRAN 1.3.3 Using Functions to Solve a Problem The code below consists of three different functions. The first two are library and covid19, but the third is hidden - its actually the arrow, &lt;- if you execute `&lt;-`(a, 1) the output of the function actually creates the variable a within your session! Functions are spaces for stuff to happen. Functions help us make common procedures repeatable. By creating a function with a particular name and inputs, we can get some sort of useful (or not useful, the worlds your oyster) output. In this case, library loads packages from a folder in the R environment called library. You can see which ones your R environment knows about by running the function .libPaths(). The dot in front of .libPaths() just means that the author intended it to be hidden, which doesnt really mean much to us. When you run install.packages that code is at a path in the .libPaths() output. covid19 is a function from the COVID19 package, and would only be available after executing library(COVID19) or if library(COVID19) is omitted, by pulling it from the package namespace directly by preceding the function with the package name and two colons like so: COVID19::covid19. Generally speaking, you simply use library because it reduces the amount of text on the page. library(tidyverse) library(purrr) library(COVID19) covid_data &lt;- covid19( country = &#39;United States&#39;, start = &#39;2021-01-01&#39;, end = &quot;2021-11-21&quot;, verbose = FALSE, level = 2 ) glimpse(covid_data) ## Rows: 18,200 ## Columns: 47 ## $ id &lt;chr&gt; &quot;10b692cc&quot;, &quot;10b692cc&quot;, &quot;10b692cc&quot;~ ## $ date &lt;date&gt; 2021-01-01, 2021-01-02, 2021-01-0~ ## $ confirmed &lt;int&gt; 122, 122, 122, 122, 122, 124, 125,~ ## $ deaths &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2~ ## $ recovered &lt;int&gt; 29, 29, 29, 29, 29, 29, 29, 29, 29~ ## $ tests &lt;int&gt; 27102, 27132, 27143, 27419, 27525,~ ## $ vaccines &lt;int&gt; 3052, 3052, 3052, 3094, 3094, 3105~ ## $ people_vaccinated &lt;int&gt; 3051, 3051, 3051, 3093, 3093, 3104~ ## $ people_fully_vaccinated &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 95, 181, 3~ ## $ hosp &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ icu &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ vent &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ school_closing &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ workplace_closing &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ cancel_events &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ gatherings_restrictions &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ transport_closing &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ stay_home_restrictions &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ internal_movement_restrictions &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ international_movement_restrictions &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ information_campaigns &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ testing_policy &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ contact_tracing &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ facial_coverings &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ vaccination_policy &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ elderly_people_protection &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ government_response_index &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ stringency_index &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ containment_health_index &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ economic_support_index &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ administrative_area_level &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2~ ## $ administrative_area_level_1 &lt;chr&gt; &quot;United States&quot;, &quot;United States&quot;, ~ ## $ administrative_area_level_2 &lt;chr&gt; &quot;Northern Mariana Islands&quot;, &quot;North~ ## $ administrative_area_level_3 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ latitude &lt;dbl&gt; 14.15569, 14.15569, 14.15569, 14.1~ ## $ longitude &lt;dbl&gt; 145.2119, 145.2119, 145.2119, 145.~ ## $ population &lt;int&gt; 55144, 55144, 55144, 55144, 55144,~ ## $ iso_alpha_3 &lt;chr&gt; &quot;USA&quot;, &quot;USA&quot;, &quot;USA&quot;, &quot;USA&quot;, &quot;USA&quot;,~ ## $ iso_alpha_2 &lt;chr&gt; &quot;US&quot;, &quot;US&quot;, &quot;US&quot;, &quot;US&quot;, &quot;US&quot;, &quot;US&quot;~ ## $ iso_numeric &lt;int&gt; 840, 840, 840, 840, 840, 840, 840,~ ## $ iso_currency &lt;chr&gt; &quot;USD&quot;, &quot;USD&quot;, &quot;USD&quot;, &quot;USD&quot;, &quot;USD&quot;,~ ## $ key_local &lt;chr&gt; &quot;69&quot;, &quot;69&quot;, &quot;69&quot;, &quot;69&quot;, &quot;69&quot;, &quot;69&quot;~ ## $ key_google_mobility &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ key_apple_mobility &lt;chr&gt; &quot;Northern Mariana Islands&quot;, &quot;North~ ## $ key_jhu_csse &lt;chr&gt; &quot;US69&quot;, &quot;US69&quot;, &quot;US69&quot;, &quot;US69&quot;, &quot;U~ ## $ key_nuts &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA~ ## $ key_gadm &lt;chr&gt; &quot;MNP&quot;, &quot;MNP&quot;, &quot;MNP&quot;, &quot;MNP&quot;, &quot;MNP&quot;,~ Lets look at what happened - we passed a few inputs and received a dataframe. A dataframe is a list with the requirement that all elements of the list are atomic vectors of equal length. Lets look at what that means. map_chr(covid_data, typeof) ## id date ## &quot;character&quot; &quot;double&quot; ## confirmed deaths ## &quot;integer&quot; &quot;integer&quot; ## recovered tests ## &quot;integer&quot; &quot;integer&quot; ## vaccines people_vaccinated ## &quot;integer&quot; &quot;integer&quot; ## people_fully_vaccinated hosp ## &quot;integer&quot; &quot;integer&quot; ## icu vent ## &quot;integer&quot; &quot;integer&quot; ## school_closing workplace_closing ## &quot;integer&quot; &quot;integer&quot; ## cancel_events gatherings_restrictions ## &quot;integer&quot; &quot;integer&quot; ## transport_closing stay_home_restrictions ## &quot;integer&quot; &quot;integer&quot; ## internal_movement_restrictions international_movement_restrictions ## &quot;integer&quot; &quot;integer&quot; ## information_campaigns testing_policy ## &quot;integer&quot; &quot;integer&quot; ## contact_tracing facial_coverings ## &quot;integer&quot; &quot;integer&quot; ## vaccination_policy elderly_people_protection ## &quot;integer&quot; &quot;integer&quot; ## government_response_index stringency_index ## &quot;double&quot; &quot;double&quot; ## containment_health_index economic_support_index ## &quot;double&quot; &quot;double&quot; ## administrative_area_level administrative_area_level_1 ## &quot;integer&quot; &quot;character&quot; ## administrative_area_level_2 administrative_area_level_3 ## &quot;character&quot; &quot;character&quot; ## latitude longitude ## &quot;double&quot; &quot;double&quot; ## population iso_alpha_3 ## &quot;integer&quot; &quot;character&quot; ## iso_alpha_2 iso_numeric ## &quot;character&quot; &quot;integer&quot; ## iso_currency key_local ## &quot;character&quot; &quot;character&quot; ## key_google_mobility key_apple_mobility ## &quot;character&quot; &quot;character&quot; ## key_jhu_csse key_nuts ## &quot;character&quot; &quot;logical&quot; ## key_gadm ## &quot;character&quot; When you have a list of things, you can apply a function to each item in the list. So in the list above, we have 47 atomic vectors. What does that mean? An atomic vector is like a list, but it has to contain the same thing in each cell. How do I know if a function is vectorized Vectorization in R vector_example &lt;- c(1, &#39;a&#39;, TRUE) list_example &lt;- list(1, &#39;a&#39;, TRUE) map_chr(vector_example, typeof) ## [1] &quot;character&quot; &quot;character&quot; &quot;character&quot; map_chr(list_example, typeof) ## [1] &quot;double&quot; &quot;character&quot; &quot;logical&quot; With the knowledge of vectors and lists, what can we do? Well, the first thing I notice is that some of the vectors are completely NA. Lets check the number of NA values in each vector. all_na &lt;- function(item) { sum(is.na(item))==length(item) } covid_data &lt;- discard(covid_data, all_na) head(covid_data) ## id date confirmed deaths recovered tests vaccines ## 1 10b692cc 2021-01-01 122 2 29 27102 3052 ## 2 10b692cc 2021-01-02 122 2 29 27132 3052 ## 3 10b692cc 2021-01-03 122 2 29 27143 3052 ## 4 10b692cc 2021-01-04 122 2 29 27419 3094 ## 5 10b692cc 2021-01-05 122 2 29 27525 3094 ## 6 10b692cc 2021-01-06 124 2 29 27538 3105 ## people_vaccinated people_fully_vaccinated hosp icu vent school_closing ## 1 3051 1 NA NA NA NA ## 2 3051 1 NA NA NA NA ## 3 3051 1 NA NA NA NA ## 4 3093 1 NA NA NA NA ## 5 3093 1 NA NA NA NA ## 6 3104 1 NA NA NA NA ## workplace_closing cancel_events gatherings_restrictions transport_closing ## 1 NA NA NA NA ## 2 NA NA NA NA ## 3 NA NA NA NA ## 4 NA NA NA NA ## 5 NA NA NA NA ## 6 NA NA NA NA ## stay_home_restrictions internal_movement_restrictions ## 1 NA NA ## 2 NA NA ## 3 NA NA ## 4 NA NA ## 5 NA NA ## 6 NA NA ## international_movement_restrictions information_campaigns testing_policy ## 1 NA NA NA ## 2 NA NA NA ## 3 NA NA NA ## 4 NA NA NA ## 5 NA NA NA ## 6 NA NA NA ## contact_tracing facial_coverings vaccination_policy elderly_people_protection ## 1 NA NA NA NA ## 2 NA NA NA NA ## 3 NA NA NA NA ## 4 NA NA NA NA ## 5 NA NA NA NA ## 6 NA NA NA NA ## government_response_index stringency_index containment_health_index ## 1 NA NA NA ## 2 NA NA NA ## 3 NA NA NA ## 4 NA NA NA ## 5 NA NA NA ## 6 NA NA NA ## economic_support_index administrative_area_level administrative_area_level_1 ## 1 NA 2 United States ## 2 NA 2 United States ## 3 NA 2 United States ## 4 NA 2 United States ## 5 NA 2 United States ## 6 NA 2 United States ## administrative_area_level_2 latitude longitude population iso_alpha_3 ## 1 Northern Mariana Islands 14.15569 145.2119 55144 USA ## 2 Northern Mariana Islands 14.15569 145.2119 55144 USA ## 3 Northern Mariana Islands 14.15569 145.2119 55144 USA ## 4 Northern Mariana Islands 14.15569 145.2119 55144 USA ## 5 Northern Mariana Islands 14.15569 145.2119 55144 USA ## 6 Northern Mariana Islands 14.15569 145.2119 55144 USA ## iso_alpha_2 iso_numeric iso_currency key_local key_google_mobility ## 1 US 840 USD 69 &lt;NA&gt; ## 2 US 840 USD 69 &lt;NA&gt; ## 3 US 840 USD 69 &lt;NA&gt; ## 4 US 840 USD 69 &lt;NA&gt; ## 5 US 840 USD 69 &lt;NA&gt; ## 6 US 840 USD 69 &lt;NA&gt; ## key_apple_mobility key_jhu_csse key_gadm ## 1 Northern Mariana Islands US69 MNP ## 2 Northern Mariana Islands US69 MNP ## 3 Northern Mariana Islands US69 MNP ## 4 Northern Mariana Islands US69 MNP ## 5 Northern Mariana Islands US69 MNP ## 6 Northern Mariana Islands US69 MNP "],["initial-setup.html", "Chapter 2 Initial Setup", " Chapter 2 Initial Setup Book Outline Install R Install R Studio Windows Only: Install RTools When installed, run in the RStudio Console: write('PATH=\"${RTOOLS40_HOME}\\\\usr\\\\bin;${PATH}\"', file = \"~/.Renviron\", append = TRUE) Windows Only: Install WSL2 Computer should be completely updated before install. Install Git Create Github Account Fork r-handbook Install Docker and Docker Compose Create AWS Account Billing will be discussed in the course, but dont expect to pay much - i.e., 10-20 dollars a month for high course activity. Remember to stop EC2 servers when we begin using them. AWS is polite about your first few refund requests. Create Reddit Account Follow Instructions here Make sure you install the tidyverse packages. Update to renv later. install.packages(&#39;tidyverse&#39;) "],["what-is-r.html", "Chapter 3 What is R 3.1 Types of Problems You Can Solve 3.2 Base R, Tidyverse, data.table 3.3 Arguments/ Developments within the language 3.4 What are Variables", " Chapter 3 What is R 3.1 Types of Problems You Can Solve 3.2 Base R, Tidyverse, data.table 3.3 Arguments/ Developments within the language 3.4 What are Variables 3.4.1 Valid Variable Names "],["functions.html", "Chapter 4 Building Blocks 4.1 Vectors 4.2 Functions", " Chapter 4 Building Blocks 4.1 Vectors Vectors are containers information of similar type. You can think of them as having \\(1*n\\) cells where \\(n\\) is any positive integer, and make up the rows and columns of tables. Vectors always contain the same type of value. R has many different types of vectors, but the most common are numeric, character, and logical (TRUE/FALSE). Vectors are cool. I like to think of them as boxes that can only be stacked on top of one another. typeof(c(TRUE)) ## [1] &quot;logical&quot; typeof(c(TRUE, 1)) ## [1] &quot;double&quot; typeof(c(TRUE, 1, &#39;a&#39;)) ## [1] &quot;character&quot; 4.2 Functions Functions are containers where anything or nothing can happen, but whatever happens, it happens the same way every single time. They allow for generalization of complicated ideas and routines that we wish to repeat over and over again. A function may have an input, but no output. It may have an output, but no input, both or none. If its something you need to do repeatedly, or containing code makes your program easier to read, then write a function for that process. Rule 4: Functions have inputs, outputs, and a body. A function can have multiple outputs, but given a particular set of inputs, the solution should never change assuming you are not developing a function with randomness built in. R has a built-in constant called letters. This means that no matter where you are writing R, letters will be available to you. We see that letters is a character vector in our program below, and use the composition of functions to create a program that describes letters. print(letters) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; Next, we can use some functions which take in pretty much any object that exists in R and spits back information regarding the letters data. main &lt;- function() { print_information &lt;- function(x) { variable_name = deparse1(substitute(x)) length_x = length(x) typeof_x &lt;- typeof(x) is_vec_x &lt;- is.vector(x) meta_list &lt;- list( length = length_x, type = typeof_x, is_vector = is_vec_x ) cli::cli_alert(&#39;Information about {variable_name}&#39;) cli::cli_alert_info(&quot;{variable_name} is a 1x{length_x} dimensional&quot;) cli::cli_alert_info(&quot;&quot;) purrr::iwalk(meta_list, function(x, index) { cli::cli_alert_info(glue::glue(&#39;{index} {x} is type {typeof(x)}&#39;)) }) return(meta_list) } cli::cli_alert_info(&#39;Execute print_information&#39;) output &lt;- print_information(mtcars) cli::cli_alert_success(&#39;Execute print_information complete&#39;) print(output) } main() ## i Execute print_information ## &gt; Information about mtcars ## i mtcars is a 1x11 dimensional ## i ## i length 11 is type integer ## i type list is type character ## i is_vector FALSE is type logical ## v Execute print_information complete ## $length ## [1] 11 ## ## $type ## [1] &quot;list&quot; ## ## $is_vector ## [1] FALSE "],["debugging.html", "Chapter 5 Debugging 5.1 What is the debugger? 5.2 How to learn R without knowing any R 5.3 browser() 5.4 next, continue 5.5 debug and undebug 5.6 debugonce 5.7 Understanding debugging output 5.8 LOTS OF DEBUGGING EXERCISES CANNOT STRESS ENOUGH", " Chapter 5 Debugging 5.1 What is the debugger? 5.2 How to learn R without knowing any R 5.3 browser() 5.4 next, continue 5.5 debug and undebug 5.6 debugonce 5.7 Understanding debugging output 5.8 LOTS OF DEBUGGING EXERCISES CANNOT STRESS ENOUGH "],["vectors-1.html", "Chapter 6 Vectors 6.1 c 6.2 [ and [[", " Chapter 6 Vectors 6.1 c 6.2 [ and [[ Vectors atomic Strings Base R stringr Regular Expressions Cheat Sheet Numbers Integer Double Factors as.factor vs. as_factor Dates Base R lubridate "],["lists.html", "Chapter 7 Lists 7.1 list 7.2 [ and [[", " Chapter 7 Lists 7.1 list 7.2 [ and [[ Lists list() and c [ and [[ Connection between lists and json jsonlite "],["tables.html", "Chapter 8 Tables 8.1 c 8.2 [ and [[", " Chapter 8 Tables 8.1 c 8.2 [ and [[ Tables matrices data.frame vs tibble data.frames are lists with equal length, atomic vectors "],["functional-programming.html", "Chapter 9 Functional Programming 9.1 Base R 9.2 Modern R", " Chapter 9 Functional Programming Functions Sequences Mapping functions pipes void return Can a function return nothing? What are side effects? Multiple return statements 9.1 Base R apply, lapply, mapply 9.2 Modern R purrr * map_* * map2_* * pmap_* * Iterate over What? * Why are data.frames mapped over columnwise? * A: data.frames are lists, and mapping functions will iterate over each individual item in a list "],["tidy-data.html", "Chapter 10 Tidy Data", " Chapter 10 Tidy Data Concept of tidy data Tidy Data Paper tidyr pivot_longer pivot_wider "],["dplyr.html", "Chapter 11 dplyr", " Chapter 11 dplyr dplyr and data manipulation main functions select mutate filter transmute summarizing data group_by summarize - one row per group mutate - one or many rows per group will have same value ungroup - remove grouping Not everything has to be a group_by Solving group problems with vectors Joining Tables inner_join full_join left_join / right_join "],["project-outline.html", "Chapter 12 Project Outline", " Chapter 12 Project Outline To be expanded over many chapters Windows vs Mac vs Linux Docker Installation Windows needs to set up VM in bios RStudio IDE Cheat Sheet reddit api creds reticulate Enough R to know Python Type Conversions miniconda installation virtual environments Package Structure Defaults for RStudio Rebuild and Restart with Roxygen2 .env .gitignore .Rprofile .Renviron Packages necessary for efficient development usethis roxygen devtools Cheat Sheet Make and Makefiles Automating Package Build Unit Testing (probably bad location for ut, no code written) testthat Git Github git circle, workflow Retrieving Data from API praw dotenv and .env Old Reddit Code to start with Docker and Docker Compose Introduction .dockerignore Create Postgres Database What are Ports? Postgres Credentials Create functions for Storing Reddit Data Need preferred method for streaming data, i.e., Airflow not a good scheduler for scripts that are always running and need a kickstart on failure, timeout, etc. Docker with restart: always may be sufficient Plumber API Add to docker-compose Functions for ETL, Shiny Application ETL with Airflow and HTTP operator connected to Plumber API Shiny Reactive Graph Order does not matter, the graph does Why Modules? map over modules Automating Infrastructure awscli boto3 biggr Create EC2 Server from R User Data "],["references.html", "References", " References "]]
